name: Continuous Deployment

on:
    push:
        branches: [main]

permissions:
    contents: read
    packages: write # Required for pushing to GHCR

jobs:
    publish-images:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                include:
                    - name: Main Application
                      dockerfile: Dockerfile
                      image_name: vasteras-stadsmission/matkassen
                      context: .
                    - name: Database Backup Service
                      dockerfile: Dockerfile.db-backup
                      image_name: vasteras-stadsmission/matkassen-db-backup
                      context: .

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract Docker metadata (tags, labels)
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ghcr.io/${{ matrix.image_name }}
                  tags: |
                      type=raw,value=latest,enable={{is_default_branch}}
                      type=sha,prefix=sha-,format=short

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build and push ${{ matrix.name }}
              uses: docker/build-push-action@v6
              with:
                  context: ${{ matrix.context }}
                  file: ${{ matrix.dockerfile }}
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Image published successfully
              run: |
                  echo "‚úÖ ${{ matrix.name }} published to GHCR"
                  echo "üì¶ Image: ghcr.io/${{ matrix.image_name }}"
                  echo "üè∑Ô∏è  Tags: ${{ steps.meta.outputs.tags }}"

    deploy-to-staging:
        needs: publish-images
        runs-on: ubuntu-latest
        environment:
            name: staging
            url: https://staging.matcentralen.com
        steps:
            - name: Deploy to staging
              uses: appleboy/ssh-action@v1.2.2
              with:
                  host: ${{ secrets.SERVER_HOST_STAGING }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                      echo "Export GitHub secrets into environment variables"
                      export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD_STAGING }}"
                      export POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
                      export POSTGRES_DB="${{ secrets.POSTGRES_DB }}"
                      export EMAIL="${{ secrets.EMAIL }}"
                      export AUTH_GITHUB_ID="${{ secrets.AUTH_GITHUB_ID }}"
                      export AUTH_GITHUB_SECRET="${{ secrets.AUTH_GITHUB_SECRET }}"
                      export AUTH_SECRET="${{ secrets.AUTH_SECRET }}"
                      export AUTH_GITHUB_APP_ID="${{ secrets.AUTH_GITHUB_APP_ID }}"
                      export AUTH_GITHUB_APP_PRIVATE_KEY="${{ secrets.AUTH_GITHUB_APP_PRIVATE_KEY }}"
                      export AUTH_GITHUB_APP_INSTALLATION_ID="${{ secrets.AUTH_GITHUB_APP_INSTALLATION_ID }}"
                      export GITHUB_ORG="vasteras-stadsmission"
                      export DOMAIN_NAME="staging.matcentralen.com"
                      export BRAND_NAME="Matcentralen"
                      export ENV_NAME="staging"
                      export HELLO_SMS_TEST_MODE="true"
                      export ANONYMIZATION_SCHEDULE="*/15 * * * *"
                      export ANONYMIZATION_INACTIVE_DURATION="5 minutes"
                      # SMS credentials not needed in staging (test mode only)
                      # Backups disabled on staging by policy (no secrets exported)
                      export SWIFT_PREFIX="backups/${ENV_NAME}"

                      APP_DIR=~/matkassen
                      if [ -d "$APP_DIR" ]; then
                          echo "Pulling latest changes from the repository..."
                          cd $APP_DIR
                          echo "Discarding any local changes..."
                          git reset --hard HEAD
                          git clean -fd
                          git pull origin main

                          # Run the update.sh script which will apply migrations
                          chmod +x update.sh
                          ./update.sh
                          UPDATE_STATUS=$?

                          if [ $UPDATE_STATUS -ne 0 ]; then
                              echo "‚ùå Deployment failed with status: $UPDATE_STATUS"
                              exit $UPDATE_STATUS
                          else
                              echo "‚úÖ Successfully deployed all updates."
                          fi
                      else
                          echo "App directory not found"
                          exit 1
                      fi

    manual-deploy-to-production:
        needs: deploy-to-staging
        environment:
            name: production
            url: https://matcentralen.com
        runs-on: ubuntu-latest
        steps:
            - name: Deploy to production
              uses: appleboy/ssh-action@v1.2.2
              with:
                  host: ${{ secrets.SERVER_HOST_PRODUCTION }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                      echo "Export GitHub secrets into environment variables"
                      export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD_PRODUCTION }}"
                      export POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
                      export POSTGRES_DB="${{ secrets.POSTGRES_DB }}"
                      export EMAIL="${{ secrets.EMAIL }}"
                      export AUTH_GITHUB_ID="${{ secrets.AUTH_GITHUB_ID }}"
                      export AUTH_GITHUB_SECRET="${{ secrets.AUTH_GITHUB_SECRET }}"
                      export AUTH_SECRET="${{ secrets.AUTH_SECRET }}"
                      export AUTH_GITHUB_APP_ID="${{ secrets.AUTH_GITHUB_APP_ID }}"
                      export AUTH_GITHUB_APP_PRIVATE_KEY="${{ secrets.AUTH_GITHUB_APP_PRIVATE_KEY }}"
                      export AUTH_GITHUB_APP_INSTALLATION_ID="${{ secrets.AUTH_GITHUB_APP_INSTALLATION_ID }}"
                      export GITHUB_ORG="vasteras-stadsmission"
                      export DOMAIN_NAME="matcentralen.com"
                      export BRAND_NAME="Matcentralen"
                      export SMS_SENDER="Matcentral"
                      export ENV_NAME="production"
                      export HELLO_SMS_USERNAME="${{ secrets.HELLO_SMS_USERNAME }}"
                      export HELLO_SMS_PASSWORD="${{ secrets.HELLO_SMS_PASSWORD }}"
                      export HELLO_SMS_TEST_MODE="false"
                      export ANONYMIZATION_SCHEDULE="0 2 * * 0"
                      export ANONYMIZATION_INACTIVE_DURATION="1 year"
                      # OpenStack Swift (env_auth) - hardcoded non-sensitive values
                      export OS_AUTH_TYPE=v3applicationcredential
                      export OS_AUTH_URL=https://ops.elastx.cloud:5000/v3
                      export OS_REGION_NAME=se-sto
                      export OS_INTERFACE=public
                      export OS_IDENTITY_API_VERSION=3
                      export OS_APPLICATION_CREDENTIAL_ID="${{ secrets.OS_APPLICATION_CREDENTIAL_ID }}"
                      export OS_APPLICATION_CREDENTIAL_SECRET="${{ secrets.OS_APPLICATION_CREDENTIAL_SECRET }}"
                      export SWIFT_CONTAINER="${{ secrets.SWIFT_CONTAINER }}"
                      export SWIFT_PREFIX="backups/${ENV_NAME}"

                      # Slack bot (single summary per backup)
                      export SLACK_BOT_TOKEN="${{ secrets.SLACK_BOT_TOKEN }}"
                      export SLACK_CHANNEL_ID="${{ secrets.SLACK_CHANNEL_ID }}"

                      APP_DIR=~/matkassen
                      if [ -d "$APP_DIR" ]; then
                          echo "Pulling latest changes from the repository..."
                          cd $APP_DIR
                          echo "Discarding any local changes..."
                          git reset --hard HEAD
                          git clean -fd
                          git pull origin main

                          # Run the update.sh script which will apply migrations
                          chmod +x update.sh
                          ./update.sh
                          UPDATE_STATUS=$?

                          if [ $UPDATE_STATUS -ne 0 ]; then
                              echo "‚ùå Deployment failed with status: $UPDATE_STATUS"
                              exit $UPDATE_STATUS
                          else
                              echo "‚úÖ Successfully deployed all updates."
                          fi
                      else
                          echo "App directory not found"
                          exit 1
                      fi
