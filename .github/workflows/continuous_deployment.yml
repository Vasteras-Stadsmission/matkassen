name: Continuous Deployment

on:
    push:
        branches: [main]

permissions:
    contents: read

jobs:
    deploy-to-staging:
        runs-on: ubuntu-latest
        environment:
            name: staging
            url: https://staging.matkassen.org
        steps:
            - name: Deploy to staging
              uses: appleboy/ssh-action@v1.2.2
              with:
                  host: ${{ secrets.SERVER_HOST_STAGING }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                      echo "Export GitHub secrets into environment variables"
                      export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
                      export POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
                      export POSTGRES_DB="${{ secrets.POSTGRES_DB }}"
                      export EMAIL="${{ secrets.EMAIL }}"
                      export AUTH_GITHUB_ID="${{ secrets.AUTH_GITHUB_ID }}"
                      export AUTH_GITHUB_SECRET="${{ secrets.AUTH_GITHUB_SECRET }}"
                      export AUTH_SECRET="${{ secrets.AUTH_SECRET }}"
                      export AUTH_GITHUB_APP_ID="${{ secrets.AUTH_GITHUB_APP_ID }}"
                      export AUTH_GITHUB_APP_PRIVATE_KEY="${{ secrets.AUTH_GITHUB_APP_PRIVATE_KEY }}"
                      export AUTH_GITHUB_APP_INSTALLATION_ID="${{ secrets.AUTH_GITHUB_APP_INSTALLATION_ID }}"
                      export GITHUB_ORG="vasteras-stadsmission"
                      export DOMAIN_NAME="staging.matkassen.org"
                      export ENV_NAME="staging"
                      # Backups disabled on staging by policy (no secrets exported)
                      export SWIFT_PREFIX="backups/${ENV_NAME}"

                      APP_DIR=~/matkassen
                      if [ -d "$APP_DIR" ]; then
                          echo "Pulling latest changes from the repository..."
                          cd $APP_DIR
                          echo "Discarding any local changes..."
                          git reset --hard HEAD
                          git clean -fd
                          git pull origin main

                          # Run the update.sh script which will apply migrations
                          chmod +x update.sh
                          ./update.sh
                          UPDATE_STATUS=$?

                          if [ $UPDATE_STATUS -ne 0 ]; then
                              echo "❌ Deployment failed with status: $UPDATE_STATUS"
                              exit $UPDATE_STATUS
                          else
                              echo "✅ Successfully deployed all updates."
                          fi
                      else
                          echo "App directory not found"
                          exit 1
                      fi

    manual-deploy-to-production:
        needs: deploy-to-staging
        environment:
            name: production
            url: https://matkassen.org
        runs-on: ubuntu-latest
        steps:
            - name: Deploy to production
              uses: appleboy/ssh-action@v1.2.2
              with:
                  host: ${{ secrets.SERVER_HOST_PRODUCTION }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                      echo "Export GitHub secrets into environment variables"
                      export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
                      export POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
                      export POSTGRES_DB="${{ secrets.POSTGRES_DB }}"
                      export EMAIL="${{ secrets.EMAIL }}"
                      export AUTH_GITHUB_ID="${{ secrets.AUTH_GITHUB_ID }}"
                      export AUTH_GITHUB_SECRET="${{ secrets.AUTH_GITHUB_SECRET }}"
                      export AUTH_SECRET="${{ secrets.AUTH_SECRET }}"
                      export AUTH_GITHUB_APP_ID="${{ secrets.AUTH_GITHUB_APP_ID }}"
                      export AUTH_GITHUB_APP_PRIVATE_KEY="${{ secrets.AUTH_GITHUB_APP_PRIVATE_KEY }}"
                      export AUTH_GITHUB_APP_INSTALLATION_ID="${{ secrets.AUTH_GITHUB_APP_INSTALLATION_ID }}"
                      export GITHUB_ORG="vasteras-stadsmission"
                      export DOMAIN_NAME="matkassen.org"
                      export ENV_NAME="production"
                      # OpenStack Swift (env_auth) - hardcoded non-sensitive values
                      export OS_AUTH_TYPE=v3applicationcredential
                      export OS_AUTH_URL=https://ops.elastx.cloud:5000/v3
                      export OS_REGION_NAME=se-sto
                      export OS_APPLICATION_CREDENTIAL_ID="${{ secrets.OS_APPLICATION_CREDENTIAL_ID }}"
                      export OS_APPLICATION_CREDENTIAL_SECRET="${{ secrets.OS_APPLICATION_CREDENTIAL_SECRET }}"
                      export SWIFT_CONTAINER="${{ secrets.SWIFT_CONTAINER }}"
                      export SWIFT_PREFIX="backups/${ENV_NAME}"

                      # Slack bot (single summary per backup)
                      export SLACK_BOT_TOKEN="${{ secrets.SLACK_BOT_TOKEN }}"
                      export SLACK_CHANNEL_ID="${{ secrets.SLACK_CHANNEL_ID }}"

                      APP_DIR=~/matkassen
                      if [ -d "$APP_DIR" ]; then
                          echo "Pulling latest changes from the repository..."
                          cd $APP_DIR
                          echo "Discarding any local changes..."
                          git reset --hard HEAD
                          git clean -fd
                          git pull origin main

                          # Run the update.sh script which will apply migrations
                          chmod +x update.sh
                          ./update.sh
                          UPDATE_STATUS=$?

                          if [ $UPDATE_STATUS -ne 0 ]; then
                              echo "❌ Deployment failed with status: $UPDATE_STATUS"
                              exit $UPDATE_STATUS
                          else
                              echo "✅ Successfully deployed all updates."
                          fi
                      else
                          echo "App directory not found"
                          exit 1
                      fi
