name: Initial deploy to Elastx

on:
    workflow_dispatch:
        inputs:
            environment:
                description: "Target environment"
                required: true
                type: choice
                options:
                    - production
                    - staging
                default: "staging"

permissions:
    contents: read

jobs:
    deploy:
        name: Deploy to ${{ github.event.inputs.environment }}
        if: github.ref == 'refs/heads/main'
        runs-on: ubuntu-latest
        environment: ${{ github.event.inputs.environment }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Display target environment
              run: |
                  echo "=================================="
                  echo "DEPLOYING TO ${{ github.event.inputs.environment }} ENVIRONMENT"
                  echo "=================================="

            - name: Add to workflow summary
              run: |
                  echo "## üöÄ Deploying to ${{ github.event.inputs.environment }} environment" >> $GITHUB_STEP_SUMMARY

            - name: Set server host based on environment
              id: set-host
              run: |
                  if [ "${{ github.event.inputs.environment }}" == "production" ]; then
                    echo "server_host=${{ secrets.SERVER_HOST_PRODUCTION }}" >> $GITHUB_OUTPUT
                  else
                    echo "server_host=${{ secrets.SERVER_HOST_STAGING }}" >> $GITHUB_OUTPUT
                  fi

            - name: Deploy via SSH
              uses: appleboy/ssh-action@v1.2.2
              with:
                  host: ${{ steps.set-host.outputs.server_host }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                      echo "Export GitHub secrets into environment variables"
                      export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
                      export POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
                      export POSTGRES_DB="${{ secrets.POSTGRES_DB }}"
                      export EMAIL="${{ secrets.EMAIL }}"
                      export AUTH_GITHUB_ID="${{ secrets.AUTH_GITHUB_ID }}"
                      export AUTH_GITHUB_SECRET="${{ secrets.AUTH_GITHUB_SECRET }}"
                      export AUTH_SECRET="${{ secrets.AUTH_SECRET }}"
                      export AUTH_GITHUB_APP_ID="${{ secrets.AUTH_GITHUB_APP_ID }}"
                      export AUTH_GITHUB_APP_PRIVATE_KEY="${{ secrets.AUTH_GITHUB_APP_PRIVATE_KEY }}"
                      export AUTH_GITHUB_APP_INSTALLATION_ID="${{ secrets.AUTH_GITHUB_APP_INSTALLATION_ID }}"
                      export GITHUB_ORG="vasteras-stadsmission"
                      export ENV_NAME="${{ github.event.inputs.environment }}"
                      export HELLO_SMS_USERNAME="${{ secrets.HELLO_SMS_USERNAME }}"
                      export HELLO_SMS_PASSWORD="${{ secrets.HELLO_SMS_PASSWORD }}"
                      export HELLO_SMS_TEST_MODE="true"

                      # Set domain name and brand based on environment
                      if [ "${{ github.event.inputs.environment }}" == "production" ]; then
                        export DOMAIN_NAME="matcentralen.com"
                        export BRAND_NAME="Matcentralen"
                        # OpenStack Swift (env_auth) for backups - hardcoded non-sensitive values
                        export OS_AUTH_TYPE=v3applicationcredential
                        export OS_AUTH_URL=https://ops.elastx.cloud:5000/v3
                        export OS_REGION_NAME=se-sto
                        export OS_APPLICATION_CREDENTIAL_ID="${{ secrets.OS_APPLICATION_CREDENTIAL_ID }}"
                        export OS_APPLICATION_CREDENTIAL_SECRET="${{ secrets.OS_APPLICATION_CREDENTIAL_SECRET }}"
                        export SWIFT_CONTAINER="${{ secrets.SWIFT_CONTAINER }}"
                        export SLACK_BOT_TOKEN="${{ secrets.SLACK_BOT_TOKEN }}"
                        export SLACK_CHANNEL_ID="${{ secrets.SLACK_CHANNEL_ID }}"
                      else
                        export DOMAIN_NAME="staging.matcentralen.com"
                        export BRAND_NAME="Matcentralen"
                      fi
                      echo "Setting DOMAIN_NAME to $DOMAIN_NAME"
                      echo "Setting BRAND_NAME to $BRAND_NAME"

                      # Derive Swift prefix from env name
                      export SWIFT_PREFIX="backups/${ENV_NAME}"

                      echo "Checking if app directory exists"
                      if [ -d ~/matkassen ]; then
                        echo "Directory exists, removing it"
                        rm -rf ~/matkassen
                      fi

                      echo "Cloning the repository (shallow clone for faster deployment)"
                      git clone --depth 1 https://github.com/Vasteras-Stadsmission/matkassen.git ~/matkassen

                      echo "Change directory to the app folder"
                      cd ~/matkassen

                      echo "Run the deploy script"
                      chmod +x deploy.sh
                      ./deploy.sh
                      DEPLOY_STATUS=$?

                      # Check deploy.sh script status
                      if [ $DEPLOY_STATUS -ne 0 ]; then
                          echo "‚ùå Deployment failed with status: $DEPLOY_STATUS"
                          exit $DEPLOY_STATUS
                      else
                          echo "‚úÖ Successfully deployed the application to the VPS."
                      fi
