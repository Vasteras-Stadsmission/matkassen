# This workflow is triggered by Continuous Deployment and lies in a separate file to minimize code duplication.

name: Deploy

on:
    workflow_call:
        inputs:
            environment:
                required: true
                type: string
        secrets:
            AUTH_GITHUB_ID:
                required: true
            AUTH_GITHUB_SECRET:
                required: true
            AUTH_SECRET:
                required: true
            EMAIL:
                required: true
            POSTGRES_DB:
                required: true
            POSTGRES_PASSWORD:
                required: true
            POSTGRES_USER:
                required: true
            SERVER_HOST:
                required: true
            SERVER_SSH_KEY:
                required: true
            SERVER_USER:
                required: true

jobs:
    deploy:
        runs-on: ubuntu-latest
        environment: ${{ inputs.environment }}
        steps:
            - name: Deploy to ${{ inputs.environment }}
              uses: appleboy/ssh-action@v1.2.2
              with:
                  host: ${{ secrets.SERVER_HOST }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                      cd ~/matkassen

                      echo "Pulling latest changes from the repository..."
                      git reset --hard HEAD
                      git clean -fd
                      git pull origin main

                      if [ "${{ inputs.environment }}" == "production" ]; then
                        DOMAIN_NAME="matkassen.org"
                      else
                        DOMAIN_NAME="staging.matkassen.org"
                      fi
                      echo "Setting DOMAIN_NAME to $DOMAIN_NAME"

                      # For Docker internal communication
                      DATABASE_URL="postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB }}"
                      # For external tools
                      DATABASE_URL_EXTERNAL="postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}"

                      echo "Updating .env file..."
                      echo "AUTH_GITHUB_ID=\"$AUTH_GITHUB_ID\"" > ".env"
                      echo "AUTH_GITHUB_SECRET=\"$AUTH_GITHUB_SECRET\"" >> ".env"
                      echo "AUTH_REDIRECT_PROXY_URL=https://$DOMAIN_NAME/api/auth" >> ".env"
                      echo "AUTH_SECRET=\"$AUTH_SECRET\"" >> ".env"
                      echo "AUTH_TRUST_HOST=true" >> ".env"
                      echo "AUTH_URL=https://$DOMAIN_NAME/api/auth" >> ".env"
                      echo "DATABASE_URL=\"$DATABASE_URL\"" >> ".env"
                      echo "DATABASE_URL_EXTERNAL=\"$DATABASE_URL_EXTERNAL\"" >> ".env"
                      echo "EMAIL=\"$EMAIL\"" >> ".env" # Needed for Certbot
                      echo "GITHUB_ORG=\"$GITHUB_ORG\"" >> ".env"
                      echo "POSTGRES_DB=\"$POSTGRES_DB\"" >> ".env"
                      echo "POSTGRES_PASSWORD=\"$POSTGRES_PASSWORD\"" >> ".env"
                      echo "POSTGRES_USER=\"$POSTGRES_USER\"" >> ".env"

                      echo "Checking for .env file..."
                      if [ ! -f ".env" ]; then
                        echo "ERROR: .env file not found"
                        exit 1
                      fi

                      echo "Rebuilding and restarting Docker containers..."
                      sudo COMPOSE_BAKE=true docker compose build
                      sudo docker compose up -d

                      echo "Verifying containers are running..."
                      if ! sudo docker compose ps | grep "Up"; then
                        echo "Docker containers failed to start. Check logs with 'docker compose logs'."
                        exit 1
                      fi

                      echo "Deployment to ${{ inputs.environment }} complete."
